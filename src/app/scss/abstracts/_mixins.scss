/**
 * _mixins.scss - Reusable Mixins for Styling
 *
 * @description
 * This file defines reusable mixins for styling throughout the application.
 * It includes a `font-face` mixin to simplify the inclusion of custom fonts
 * by generating the appropriate `@font-face` rules.
 *
 * @author
 * Cristian Moreno (Kyonax)
 * Email: iamkyo@kyo.wtf
 *
 * @note
 * Import this file wherever mixins are needed, such as in typography or global
 * stylesheets, to take advantage of reusable code and maintain consistency.
 */
@use "sass:map";
@use 'variables' as *;

/**
 * Font-Face Mixin
 *
 * @description
*/

@mixin font-face($name, $path, $weight: normal, $style: normal) {
    @font-face {
        font-family: "#{$name}";
        src: url("~@app/fonts/#{$path}.ttf") format("truetype");
        font-weight: #{$weight};
        font-style: #{$style};
    }
}


/**
 * Media Query Mixin
 *
 * @description
*/
@mixin min-media-query($key) {
    $size: map.get($breakpoints, $key);

    @media only screen and (min-width: $size) {
        @content;
    }
}

@mixin max-media-query($key) {
    $size: map.get($breakpoints, $key);

    @media only screen and (max-width: $size) {
        @content;
    }
}


/**
 * Cyberpunk Glow Mixin
 *
 * @description
 * Adds a customizable soft glowing effect to block-level elements.
 * Includes an optional animation dynamically generated based on input values.
 *
 * @param {Color} $glow-color - The color of the glow (default: #f9cd26).
 * @param {Number} $blur - The blur radius of the glow (default: 15px).
 * @param {Number} $spread - The spread radius of the glow (default: 5px).
 * @param {Boolean} $animated - Whether to add a subtle pulsing animation (default: true).
 */
@mixin cyberpunk-glow(
    $glow-color: #ffffff,
    $blur: 15px,
    $spread: 5px,
    $animated: true
) {
    box-shadow: 0 0 $spread $blur $glow-color;

    // Dynamically generate animation if $animated is true
    @if $animated {
        animation: cyberpunk-pulse-#{$blur}-#{$spread} 1.5s infinite alternate;

        @keyframes cyberpunk-pulse-#{$blur}-#{$spread} {
            0% {
                box-shadow: 0 0 calc(#{$spread} / 2) calc(#{$blur} / 2)
                    rgba($glow-color, 0.8) !important;
            }
            100% {
                box-shadow: 0 0 #{$spread} #{$blur} rgba($glow-color, 0.5) !important;
            }
        }
    }
}


@mixin border-flare($color: #ff00ff, $duration: 3s, $spread: 10px, $pause-duration: 2s, $base-opacity: 0.5) {
  position: relative;

  &:before {
    content: '';
    position: absolute;
    top: calc(-#{$spread} / 2);
    left: calc(-#{$spread} / 2);
    right: calc(-#{$spread} / 2);
    bottom: calc(-#{$spread} / 2);
    border: 2px solid transparent;
    border-radius: inherit; // Match the parent element's border-radius
    background: linear-gradient(90deg, transparent, $color, transparent);
    background-size: 200% 200%; // Ensure the gradient spans enough to create a smooth animation
    filter: blur(4px); // Apply glow effect
    opacity: $base-opacity; // Set the initial opacity to the base opacity
    z-index: -1;
    animation: flare-breathe $duration linear infinite, flare-opacity $pause-duration ease-in-out infinite;
  }

  // Main animation for the flare movement
  @keyframes flare-breathe {
    0% {
      background-position: 100% 0;
    }
    25% {
      background-position: 0 100%;
    }
    50% {
      background-position: 100% 100%;
    }
    75% {
      background-position: 0 0;
    }
    100% {
      background-position: 100% 0;
    }
  }

  // Opacity animation for the breathing effect
  @keyframes flare-opacity {
    0% {
      opacity: 0; // Use the base opacity at the start
    }
    50% {
      opacity: $base-opacity; // Fade out to 0%
    }
    100% {
      opacity: 0; // Fade back to the base opacity
    }
  }
}
