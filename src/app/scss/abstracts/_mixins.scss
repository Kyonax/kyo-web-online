/**
 * @file _mixins.scss - Mixins
 *
 * This file is dedicated to managing all the mixins for this
 * project, ensuring reusable and consistent styling.
 *
 * node.js-v20.17.0
 *
 * @author Cristian Moreno (Kyonax)
 * @contact iamkyo@kyo.wtf
 * @date 2025-01-24
 *
 * Code Guidelines :: @CCSv0.1
 * More details: https://code-guidelines.cybercodesyndicate.org
 * - Tabs onlyâ€”no spaces.
 * - Naming:
 *   - kebab-case for classes and file names (e.g., file-example.js).
 *   - __underscore for childs (double underscore prefix).
 * - Meaningful Names btn-default-class over classOne.
 *
 * Repository-URL
 * https://github.com/Kyonax/kyo-web-online
 *
 * @dependencies
 * - Using "sass:map";
 * - Using "sass:math";
 * - Using "sass:meta";
 * - Using "sass:string";
 * - Using * from "variables"
 *
 * @usage
 * Import this file into any SASS where mixins are needed,
 * like typography or global stylesheets, to leverage
 * reusable code and keep styles uniform.
 */
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:color";
@use "sass:string";
@use "variables" as *;

/**
 * Font Face Mixin
 *
 * Creates a custom @font-face rule to use your own fonts.
 * It's quick and to the point.
 *
 * @params
 * $name - The font name.
 * $path - Where the font file lives.
 * $weight - Font weight (default: normal).
 * $style - Font style (default: normal).
 */
@mixin font-face($name, $path, $weight: normal, $style: normal) {
  @font-face {
    font-family: "#{$name}";
    src: url("~@app/fonts/#{$path}.ttf") format("truetype");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}

/**
 * Min Media Query Mixin
 *
 * Sets up a media query for when the screen is at least a
 * certain size. Perfect for scaling up.
 *
 * @params
 * $key - The size key from your $breakpoints map.
 */
@mixin min-media-query($key) {
  $size: map.get($breakpoints, $key);

  @media only screen and (min-width: $size) {
    @content;
  }
}

/**
 * Max Media Query Mixin
 *
 * Sets up a media query for when the screen is at most a
 * certain size. Handy for scaling down.
 *
 * @params
 * $key - The size key from your $breakpoints map.
 */
@mixin max-media-query($key) {
  $size: map.get($breakpoints, $key);

  @media only screen and (max-width: $size) {
    @content;
  }
}

/**
 * Cyberpunk Glow Mixin
 *
 * Gives your block elements a glowing, futuristic look.
 * Optionally adds a cool pulsing animation.
 *
 * @parammath
 * $glow-color - The glow color (default: #ffffff).
 * $blur - How blurry the glow is (default: 15px).
 * $spread - How wide the glow spreads (default: 5px).
 * $animated - Adds a pulsing effect if true (default: true).
 */
@mixin cyberpunk-glow(
  $glow-color: hsl(47, 95%, 56%),
  $blur: 15px,
  $spread: 5px,
  $animated: true,
  $speed: 1.5s,
  $pulse-variation: 0.2
) {
  box-shadow: 0 0 $spread $blur $glow-color;
  @if $animated {
    $index: math.floor(calc(math.random() * 1000000));

    animation: cyberpunk-pulse-#{$index} $speed ease-in-out infinite alternate;

    @keyframes cyberpunk-pulse-#{$index} {
      0% {
        $min-spread: calc(#{$spread} / 2);
        $min-blur: calc(#{$blur} / 2);
        box-shadow: 0 0 $min-spread $min-blur $glow-color;
      }
      50% {
        $max-spread: calc(#{$spread} * (1.5 + $pulse-variation));
        $max-blur: calc(#{$blur} * (1.5 + $pulse-variation));
        box-shadow: 0 0 $max-spread $max-blur $glow-color;
      }
      100% {
        $min-spread: calc(#{$spread} / 2);
        $min-blur: calc(#{$blur} / 2);
        box-shadow: 0 0 $min-spread $min-blur $glow-color;
      }
    }
  }
}

/**
 * Element Flare Mixin
 *
 * Applies a dynamic glowing effect to your element,
 * causing it to oscillate side to side, enhancing visibility
 * with a soft glow, and simulating a breathing effect.
 *
 * This can give your UI a lively, almost animated feel.
 *
 * @params
 * $color - The Flare Color (default: #ff00ff).
 * $duration - Time for the flare to swing back and forth (default: 3s).
 * $spread - how much the flare spreads its wings (default: 10px).
 * $breath - Time for the flare to inhale and exhale (default: 2s).
 * $base-opacity - Base glow intensity (default: 0.5, because it's halfway cool).
 */
@mixin element-flare(
  $color: #ff00ff,
  $duration: 3s,
  $spread: 10px,
  $breath: 2s,
  $base-opacity: 0.5
) {
  position: relative;

  &:before {
    content: "";
    position: absolute;
    top: calc(#{$spread} / 2);
    left: calc(#{$spread} / 2);
    right: calc(#{$spread} / 2);
    bottom: calc(#{$spread} / 2);
    border: 2px solid transparent;
    border-radius: inherit;
    background: linear-gradient(90deg, transparent, $color, transparent);
    background-size: 200% 200%;
    filter: blur(4px);
    opacity: $base-opacity;
    z-index: -1;
    animation:
      flare-breathe $duration linear infinite,
      flare-opacity $breath ease-in-out infinite;
  }

  // Main animation for the flare movement
  @keyframes flare-breathe {
    0% {
      background-position: 100% 0;
    }
    25% {
      background-position: 0 100%;
    }
    50% {
      background-position: 100% 100%;
    }
    75% {
      background-position: 0 0;
    }
    100% {
      background-position: 100% 0;
    }
  }

  // Opacity animation for the breathing effect
  @keyframes flare-opacity {
    0% {
      opacity: 0; // Starts with no glow
    }
    50% {
      opacity: $base-opacity; // Full glow
    }
    100% {
      opacity: 0; // Fades back out
    }
  }
}
